{"0": {
    "doc": "Git",
    "title": "Примеры коммит-мессаджей",
    "content": ". | Примеры Commit Message разработчиков Git | jossbuchea - Semantic Commit Messages | Conventional Commits | Sparkbox - Sementic Commit Messages | Karma Git Commit Msg | . ",
    "url": "/1.%20Git.html#%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82-%D0%BC%D0%B5%D1%81%D1%81%D0%B0%D0%B4%D0%B6%D0%B5%D0%B9",
    "relUrl": "/1.%20Git.html#примеры-коммит-мессаджей"
  },"1": {
    "doc": "Git",
    "title": "Git",
    "content": " ",
    "url": "/1.%20Git.html",
    "relUrl": "/1.%20Git.html"
  },"2": {
    "doc": "TShock",
    "title": "TShock",
    "content": " ",
    "url": "/1001.%20TShock.html",
    "relUrl": "/1001.%20TShock.html"
  },"3": {
    "doc": "Jenkins",
    "title": "Jenkins",
    "content": "Прямая ссылка на http://http://45.89.52.66:8081/ . sudo service jenkins start Запуск sudo service jenkins restart Перезапустить sudo service jenkins stop Остановить . sudo service jenkins status Статус. должно быть active(running) sudo systemctl status jenkins.service Статус. должно быть active(running) . Поменять порт с 8080 на другой systemctl edit jenkins Добавить [Service] Environment=\"JENKINS_PORT=8081\" . sudo nano /etc/default/jenkins Здесь настройки порта менять не получится. Альтернативы Jenkins Bamboo, CircleCi, Gitlab CICD, Jetbrains Teamcity, Travis . ",
    "url": "/2.%20Jenkins.html",
    "relUrl": "/2.%20Jenkins.html"
  },"4": {
    "doc": "Nginx",
    "title": "Nginx",
    "content": " ",
    "url": "/3.%20Nginx.html",
    "relUrl": "/3.%20Nginx.html"
  },"5": {
    "doc": "Ubuntu",
    "title": "Ubuntu",
    "content": "clear очистить экран cat /etc/os-release версия ОС sudo ufw reset никогда не нажимать . ",
    "url": "/4.%20Ubuntu.html",
    "relUrl": "/4.%20Ubuntu.html"
  },"6": {
    "doc": "Docker",
    "title": "Docker",
    "content": " ",
    "url": "/5.%20Docker.html",
    "relUrl": "/5.%20Docker.html"
  },"7": {
    "doc": "CSharp",
    "title": "CSharp",
    "content": " ",
    "url": "/501.%20CSharp.html",
    "relUrl": "/501.%20CSharp.html"
  },"8": {
    "doc": "Dotnet",
    "title": "Dotnet",
    "content": " ",
    "url": "/502.%20Dotnet.html",
    "relUrl": "/502.%20Dotnet.html"
  },"9": {
    "doc": "Markdown",
    "title": "Markdown",
    "content": " ",
    "url": "/505.%20Markdown.html",
    "relUrl": "/505.%20Markdown.html"
  },"10": {
    "doc": "VS Code",
    "title": "VS Code",
    "content": " ",
    "url": "/506.%20VSCode.html",
    "relUrl": "/506.%20VSCode.html"
  },"11": {
    "doc": "Branch Create",
    "title": "Git Branch",
    "content": "git branch feature Создать на последнем коммите вершину feature git branch --force feature 54a4 Создать или подвинуть если уже есть вершину feature на коммит 54a4. git branch feature HEAD@{6} создать вершину feature на шестом положении HEAD из рефлога git branch feature HEAD@{'2017-09-12 22:49:07 +0200'} восстановить вершину feature на состояние HEAD из даты . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20Create.html#git-branch",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20Create.html#git-branch"
  },"12": {
    "doc": "Branch Create",
    "title": "Git Checkout",
    "content": "git checkout -b fix создает вершину fix, а если такая уже есть, ошибка? Двигает HEAD на fix. git checkout -B feature 54a4 новая ветка feature создается на 54a4 Эта команда делает то же, что . git branch -f feature (создать вершину master на коммите, на котором стоит вершина, на которой стоит HEAD) и git checkout feature переместить HEAD на feature . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20Create.html#git-checkout",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20Create.html#git-checkout"
  },"13": {
    "doc": "Branch Create",
    "title": "Создать ветку для промежуточного результата",
    "content": "git checkout -b fix git commit -m \"Промежуточный результат\" git checkout master . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20Create.html#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D1%82%D1%8C-%D0%B2%D0%B5%D1%82%D0%BA%D1%83-%D0%B4%D0%BB%D1%8F-%D0%BF%D1%80%D0%BE%D0%BC%D0%B5%D0%B6%D1%83%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D1%80%D0%B5%D0%B7%D1%83%D0%BB%D1%8C%D1%82%D0%B0%D1%82%D0%B0",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20Create.html#создать-ветку-для-промежуточного-результата"
  },"14": {
    "doc": "Branch Create",
    "title": "Подвинуть вершину master на несколько коммитов назад, а текущую ветку оставить под названием fix",
    "content": "git branch fix git branch --f master 54a4 Всё, что осталось выше 54a4 теперь в ветке fix или . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20Create.html#%D0%BF%D0%BE%D0%B4%D0%B2%D0%B8%D0%BD%D1%83%D1%82%D1%8C-%D0%B2%D0%B5%D1%80%D1%88%D0%B8%D0%BD%D1%83-master-%D0%BD%D0%B0-%D0%BD%D0%B5%D1%81%D0%BA%D0%BE%D0%BB%D1%8C%D0%BA%D0%BE-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2-%D0%BD%D0%B0%D0%B7%D0%B0%D0%B4-%D0%B0-%D1%82%D0%B5%D0%BA%D1%83%D1%89%D1%83%D1%8E-%D0%B2%D0%B5%D1%82%D0%BA%D1%83-%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BF%D0%BE%D0%B4-%D0%BD%D0%B0%D0%B7%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%D0%BC-fix",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20Create.html#подвинуть-вершину-master-на-несколько-коммитов-назад-а-текущую-ветку-оставить-под-названием-fix"
  },"15": {
    "doc": "Branch Create",
    "title": "Branch Create",
    "content": "Первая ветка master создается первым git commit после git init Дальше ветки создаются командой git branch или git checkout -b . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20Create.html",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20Create.html"
  },"16": {
    "doc": "Branch Update and Delete",
    "title": "Удаление ветки",
    "content": "git branch -d fix Удалить ветку fix Сработает только если ветка посередине графа git branch -D fix игнорирует положение вершины . git reset для того чтобы, не трогая WT, откатывать индекс + двигать ветку+HEAD . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20Update%20Delete.html#%D1%83%D0%B4%D0%B0%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%82%D0%BA%D0%B8",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20Update%20Delete.html#удаление-ветки"
  },"17": {
    "doc": "Branch Update and Delete",
    "title": "Git Reset --soft &lt;commit&gt;",
    "content": "Двигает вершину бранчи, и вместе с ней HEAD. WT + Индекс не остаются как были. Используется для того чтобы упаковать несколько предыдущих коммитов в один новый. git reset --soft 9e5e Подвинуть вершину бранчи и вместе с ней HEAD, в коммит 9e5e git reset --soft HEAD~ Подвинуть вершину бранчи и вместе с ней HEAD на один коммит назад . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20Update%20Delete.html#git-reset---soft-commit",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20Update%20Delete.html#git-reset---soft-commit"
  },"18": {
    "doc": "Branch Update and Delete",
    "title": "Git Reset [--mixed] &lt;commit&gt; (по умолчанию)",
    "content": "То же что --soft, но сбрасыва индекс текущего коммита git reset 9e5e Подвинуть вершину бранчи, HEAD, изменить Index на коммит 9e5e git reset 9e5e --mixed -||- git reset HEAD Откатить индекс до состояние прошлого коммита. Использовать после git add . чтобы отменить лишнее проиндексированное git reset HEAD .idea Убрать из staginng файлы .idea . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20Update%20Delete.html#git-reset---mixed-commit-%D0%BF%D0%BE-%D1%83%D0%BC%D0%BE%D0%BB%D1%87%D0%B0%D0%BD%D0%B8%D1%8E",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20Update%20Delete.html#git-reset---mixed-commit-по-умолчанию"
  },"19": {
    "doc": "Branch Update and Delete",
    "title": "Git Reset --hard &lt;commit&gt;",
    "content": "git reset --hard 2fad Для того, чтоб отменить вообще всё сделанное после коммита 2fad - вернуть текущую вершину[master] и HEAD вместе с ней на коммит 2fad. Коммиты, оставшиеся выше, останутся в анонимной ветке. Если запомнить номер коммита (найти через cat .git/ORIG_HEAD или в git reflog) можно вернуть master и HEAD обратно так же чере git reset --hard. git reset --hard HEAD . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20Update%20Delete.html#git-reset---hard-commit",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20Update%20Delete.html#git-reset---hard-commit"
  },"20": {
    "doc": "Branch Update and Delete",
    "title": "Branch Update and Delete",
    "content": "Git Branch не умеет переносить ветку, на которой мы сейчас находимся . Reset Demystified . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20Update%20Delete.html",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20Update%20Delete.html"
  },"21": {
    "doc": "Branch and Head Log",
    "title": "Git Branch [--list]",
    "content": "git branch Вывести список всех вершин веток. Делает то же что git branch --list . git branch -v Вывести список вершин веток с номерами коммитов, на которых они стоят . cat .git/refs/heads/master Показать номер коммита, на котором вершина master . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20and%20Head%20Log.html#git-branch---list",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20and%20Head%20Log.html#git-branch---list"
  },"22": {
    "doc": "Branch and Head Log",
    "title": "Git RefLog",
    "content": "git reflog master Вывести историю движения вершины master git reflog --date=iso . Время жизни логов . gc.reflogExpire gc.reflogExpireUnreachable . ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20and%20Head%20Log.html#git-reflog",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20and%20Head%20Log.html#git-reflog"
  },"23": {
    "doc": "Branch and Head Log",
    "title": "Branch and Head Log",
    "content": " ",
    "url": "/children/Git/4.%20Git%20Branch/Branch%20and%20Head%20Log.html",
    "relUrl": "/children/Git/4.%20Git%20Branch/Branch%20and%20Head%20Log.html"
  },"24": {
    "doc": "Commit Create",
    "title": "Git Status",
    "content": "Показывает изменения Index vs Last Commit git status Показать все modified/untracked по отношению к предыдущему коммиту . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-status",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-status"
  },"25": {
    "doc": "Commit Create",
    "title": "Git Add",
    "content": "git add . Добавить все untracked файлы в текущий коммит git add -A То же, но для тех ОС, где нет оператора точки git add src Добавить папку в текущий коммит git add index.md Добавить index.md в текущий коммит git add -p index.html index.md index.php git будет спрашивать что делать с каждым измененным файлом . Добавить файлы, которые под .gitignore: git add --force, git add -f . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-add",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-add"
  },"26": {
    "doc": "Commit Create",
    "title": "Git Commit",
    "content": "git commit Отправить в репозиторий текущий коммит git commit --author='John Smith' &lt;john@me.com&gt; --date='...' Задать автора, дату git commit -m \"Text\" Закоммитить с сообщением “Text” . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-commit",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-commit"
  },"27": {
    "doc": "Commit Create",
    "title": "Git Commit+Add",
    "content": "git commit -m 'Text' index.md Добавить изменения файла index.md в индекс, закоммитить с текстом Text. Работает только для tracked файлов. git commit -a Добавить в индекс все tracked файлы git commit -a -m 'Text' то же, добавить в индес все modified и закоммитить. git commit -am 'Text' -||- . Алиас для честного Git Add . вместе с Git Commit git config --global alias.commitall '!git add .;git commit' git config --global alias.commitall '!git add -A;git commit' Вызовы будут выглядеть: git commitall -m 'Text' ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-commitadd",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-commitadd"
  },"28": {
    "doc": "Commit Create",
    "title": "Git Commit --amend Отмена одного последнего коммита",
    "content": "git commit --amend branchhead и HEAD вернутся на один коммит назад, и граф будет продолжаться оттуда. Первоначальный коммит будет в анонимной ветке. Эквивалентно git reset --soft @~;git commit Так же используется для изменения описания последнего коммита, без изменений в файлах. ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-commit---amend-%D0%BE%D1%82%D0%BC%D0%B5%D0%BD%D0%B0-%D0%BE%D0%B4%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BD%D0%B5%D0%B3%D0%BE-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%B0",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-commit---amend-отмена-одного-последнего-коммита"
  },"29": {
    "doc": "Commit Create",
    "title": "Git Commit -v",
    "content": " ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-commit--v",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-commit--v"
  },"30": {
    "doc": "Commit Create",
    "title": "Git Reset &lt;pathspec&gt;",
    "content": "git reset HEAD сбросить весь индекс текущего коммита git reset index.html удалить из индекс то, что было сделано git add index.html . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-reset-pathspec",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Create.html#git-reset-pathspec"
  },"31": {
    "doc": "Commit Create",
    "title": "Commit Create",
    "content": " ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Create.html",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Create.html"
  },"32": {
    "doc": "Commit List",
    "title": "Git Reflog Show",
    "content": "git log --oneline -g показывает движения веток и HEAD он же git reflog show . Git blame . git blame index.html -L 5,8 . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20List.html#git-reflog-show",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20List.html#git-reflog-show"
  },"33": {
    "doc": "Commit List",
    "title": "Commit List",
    "content": "6.3 вывод всего графа . Git Log: вывод списка коммитов . git log Показать все коммиты от HEAD вниз git log master Показать все коммиты от вершины master вниз git log --oneline номер, ветка, заголовок git log --follow index.html все коммиты, где менялся index.html git log --no-decorate Не показывать бранчхеды и HEAD git log --pretty=format:'%h %cd | %s%d [%an]' &lt;id коммита&gt; &lt;дата&gt; | &lt;заголовок&gt; &lt;декорирование(ссылки)&gt; [имя автора] . git log --pretty=format:'%C(yellow)%h %C(dim green)%ad %C(reset)| %C(cyan)%s%d %C(#667788)[%an]' --date=format:'%F %R' . Алиасы Алиас git lg git config --global alias.lg 'log --pretty=format:'%C(yellow)%h %C(dim green)%ad %C(reset)| %C(cyan)%s%d %C(#667788)[%an]' --date=format:'%F %R' Список коммитов от корня до коммита или бранчхеда: Git Log &lt;commit&gt; . git log master вывести все коммиты от корня до бранчхеда мастер git log master feature вывести все коммиты от корня до бранчхедов feautre и master . Список коммитов с regex-фильтром: Git Log –grep . Поиск по мессаджу git log --grep добавил найти слово коммиты со словом ‘добавил’ git log --grep добавил -i отключить регистрозависимость git log --grep добавил --grep удалил найти коммиты, где в мессадже есть или слово ‘добавил’ или слово ‘удалил’ git log --grep добавил --grep удалил --all-match найти коммиты, которые матчатся с обоими выражениями . Поиск по изменениям в файлах git log -G\"регулярноевыражения\" -p документация git log -L . git config --global grep.patternType perl Включить перловые regex . История изменений внутри файла между строчками regex1 и regex2: Git Log -L . git log -L '/&lt;head&gt;/','&lt;\\/head&gt;/':index.html история изменений внутри тега head в index.html . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20List.html",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20List.html"
  },"34": {
    "doc": "Commit Read",
    "title": "Git Show",
    "content": "Показать всё, что изменил коммит Git Show &lt;коммит&gt; . Показывает изменения, сделанные коммитом git show Показать изменения, сделанные коммитом из HEAD git show 54a4 Показывать изменения, сделанные коммитом 54a4. git show --pretty=fuller . git show HEAD~ Показать все изменения сделанные родителем коммита HEAD То же что HEAD~1 то же что @~1 git show @~2 -- index.html Показать изменения в файле index.html в прародителе HEAD если были git show @~2:index.html Показать состояние index.html в прародителе HEAD . Показать состояние файла в коммите Git Show :&lt;файл&gt; . git show :index.html Показать состояние index.html в индексе текущего коммита . git show :\"текст\" Найти коммит по тексту “текст” коммита git show 68bd Показать коммит 68bd должно быть минимум четыре цифры . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-show",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-show"
  },"35": {
    "doc": "Commit Read",
    "title": "Git Ls-Files",
    "content": "Делает то же что и ls, но позволяет фильтровать git ls-files – :!:*.md Показать все файлы без .md . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-ls-files",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-ls-files"
  },"36": {
    "doc": "Commit Read",
    "title": "Git Diff &lt;commit1&gt; &lt;commit2&gt;",
    "content": "git diff master..feature То же что и пробел. Дифф между коммитами, на которых стоят бранчхеды. git diff master...feature Дифф feature с последним общим коммитом веток git diff e2e4 e4e2 Дифф e4e2 с e2e4 git diff e2e4 Сравнить WT с коммитом e2e4 git diff HEAD Как git status, только для содержимого файлов git diff -- index.html Сравнить версию из working directory с последним коммитом . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff-commit1-commit2",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff-commit1-commit2"
  },"37": {
    "doc": "Commit Read",
    "title": "Git Diff --cached",
    "content": "Сравнить staging с указанным коммитом git diff --cached Сравнить staging с HEAD Git diff не показывает untracked файлы . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff---cached",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff---cached"
  },"38": {
    "doc": "Commit Read",
    "title": "Git diff [-- index.md] (вообще без номеров коммитов в параметрах)",
    "content": "Сравнивает WT vs Staging . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff----indexmd-%D0%B2%D0%BE%D0%BE%D0%B1%D1%89%D0%B5-%D0%B1%D0%B5%D0%B7-%D0%BD%D0%BE%D0%BC%D0%B5%D1%80%D0%BE%D0%B2-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2-%D0%B2-%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D0%B0%D1%85",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff----indexmd-вообще-без-номеров-коммитов-в-параметрах"
  },"39": {
    "doc": "Commit Read",
    "title": "Git diff &lt;один коммит&gt;",
    "content": "WT vs Коммит git diff @ . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff-%D0%BE%D0%B4%D0%B8%D0%BD-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff-один-коммит"
  },"40": {
    "doc": "Commit Read",
    "title": "Git Diff --name-only master feature",
    "content": " ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff---name-only-master-feature",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff---name-only-master-feature"
  },"41": {
    "doc": "Commit Read",
    "title": "Git diff commit1:path1 commit2:path2",
    "content": " ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff-commit1path1-commit2path2",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Read.html#git-diff-commit1path1-commit2path2"
  },"42": {
    "doc": "Commit Read",
    "title": "Commit Read",
    "content": "@ index.html изменения index.html из HEAD @~1,@~,HEAD~,HEAD~1 изменения index.html из родителя HEAD :index.html index.html из индекса текущего коммита :/text Поиск по тексту . ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Read.html",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Read.html"
  },"43": {
    "doc": "Commit Update",
    "title": "Commit Update",
    "content": " ",
    "url": "/children/Git/2.%20Git%20Commits/Commit%20Update.html",
    "relUrl": "/children/Git/2.%20Git%20Commits/Commit%20Update.html"
  },"44": {
    "doc": "Configuration",
    "title": "Конфигурация Git",
    "content": "Задать имя и почту в репозитории локально (в файле .git/config) . git config user.name \"Name Surname\" git config user.email mail@example.com cat .git/config Вывест конфиг текущей папки (через cat) git config --list Вывести конфиг репозитория текущей папки (через git) Удалить из репозитория текущей папки имя и почту: git config --unset user.name git config --unset user.email git config --remove-section user . Задать имя и почту глобально . git config --global user.name \"...\" git config --global user.email \"...\" git config --system core.autocrlf true Найстроить лайн-брейки на уровне системы cat ~/.gitconfig Вывести глобальный конфиг (через cat) git config --list --global Вывести глобальный конфиг (через git) git config --global -e Открыть конфиг в редакторе по умолчанию . git config --global core.editor /Applications/Sublime\\ Текстовый редактор по умолчанию Примеры для разных редакторов git config --global core.editor \"code --wait\" VsCode . Каскад от более к менее приоритетному: . --local ↓ --global ↓ --system . Алиасы git . git config --global alias.c 'config --global' git c вместо git config --global . ",
    "url": "/children/Git/6.%20Git%20Configuration/Configuration.html#%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F-git",
    "relUrl": "/children/Git/6.%20Git%20Configuration/Configuration.html#конфигурация-git"
  },"45": {
    "doc": "Configuration",
    "title": "Git Help",
    "content": "git config -h помощь git help config помощь по git config . ",
    "url": "/children/Git/6.%20Git%20Configuration/Configuration.html#git-help",
    "relUrl": "/children/Git/6.%20Git%20Configuration/Configuration.html#git-help"
  },"46": {
    "doc": "Configuration",
    "title": "Configuration",
    "content": " ",
    "url": "/children/Git/6.%20Git%20Configuration/Configuration.html",
    "relUrl": "/children/Git/6.%20Git%20Configuration/Configuration.html"
  },"47": {
    "doc": "Установка Docker на Ubuntu",
    "title": "Установка Docker на Ubuntu",
    "content": " ",
    "url": "/children/Docker/DockerOnUbuntu.html",
    "relUrl": "/children/Docker/DockerOnUbuntu.html"
  },"48": {
    "doc": "Head",
    "title": "Git Checkout",
    "content": "git checkout master Обновить WT до состояние ласт-коммита master. Поставить HEAD на master. Обычное переключение между ветками. git checkout @{-1},git checkout - Вернуть HEAD на предыдущее значение . git checkout 1913 перевести HEAD на коммит 1913(без ветки) - в состояние detached head. Исправляется через git checkout master &gt; git-cherry-pick . ",
    "url": "/children/Git/4.%20Head/Head.html#git-checkout",
    "relUrl": "/children/Git/4.%20Head/Head.html#git-checkout"
  },"49": {
    "doc": "Head",
    "title": "История HEAD",
    "content": "cat .git/logs/HEAD git reflog без параметров показывает историю HEAD . ",
    "url": "/children/Git/4.%20Head/Head.html#%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%8F-head",
    "relUrl": "/children/Git/4.%20Head/Head.html#история-head"
  },"50": {
    "doc": "Head",
    "title": "Head",
    "content": "Единственная команда, для того, чтобы двигать только HEAD: git checkout HEAD всегда должна стоять на вершине ветки и никогда на самом коммите. ",
    "url": "/children/Git/4.%20Head/Head.html",
    "relUrl": "/children/Git/4.%20Head/Head.html"
  },"51": {
    "doc": "Установка на Ubuntu",
    "title": "Установка на Ubuntu",
    "content": "Прямая ссылка на http://45.89.52.66:8081/login . Инструкция DigitalOcean Инструкция с оф сайта Jenkins . Проверить версии софта на сервере . cat /etc/os-release версия ОС . java -version версия Java. Должна быть 11 ? . sudo lsof -i:8080 занят ли порт 8080. Должен быть свободен. apt remove apache2 если там апач . grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* Показать sources.list . Репозиторий уже мог быть добавлен. More . Обновление локальных пакетов . sudo apt upgrade sudo apt update sudo apt install ca-certificates . Установка Java . Удалить всю старую джаву. More dpkg-query -W -f='${binary:Package}\\n' | grep -E -e '^(ia32-)?(sun|oracle)-java' -e '^openjdk-' -e '^icedtea' -e '^(default|gcj)-j(re|dk)' -e '^gcj-(.*)-j(re|dk)' -e '^java-common' | xargs sudo apt-get -y remove sudo apt-get -y autoremove . Установить с нуля Java 11 sudo apt-get install openjdk-11-jdk sudo apt-get install fontconfig . Добавить путь к Java nano /etc/environment Прописать JAVA_HOME=\"/usr/lib/jvm/java-1.11.0-openjdk-amd64\" source /etc/environment Перезагрузить echo $JAVA_HOME Проверить всё ли работает . Добавление репозитория jenkins-stable binary . wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add - Добавление ключа репозитория . sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list' Добавление в sources.list . Собственно установка . sudo apt install jenkins . UFW . Проверить, запущен ли UFW sudo ufw status . Ответ должен быть: Когда UFW включен, 8080 открыт, OpenSSH включен Status: active To Action From -- ------ ---- 8080 ALLOW Anywhere OpenSSH ALLOW Anywhere 8080 (v6) ALLOW Anywhere (v6) OpenSSH (v6) ALLOW Anywhere (v6) . Если пустые правила, надо открыть 8080 (Jenkins по умолчанию) и добавить OpenSSH sudo ufw allow 8080 sudo ufw allow OpenSSH sudo ufw enable . sudo service jenkins start Запуск sudo service jenkins stop Остановить sudo service jenkins status Статус. должно быть active(running) sudo systemctl status jenkins.service Статус. должно быть active(running) . curl localhost:8080 должно работать netstat -ntulp | grep 8080 sudo lsof -i:8080 Кто слушает порт 8080 . Первый запуск . Прямая ссылка на http://http://45.89.52.66:8081/:8080/login cat /var/lib/jenkins/secrets/initialAdminPassword выставить. Установить Suggested. Настройка языка . http://45.89.52.66:8081/ Ctrl+F “Locale” Default Language: en Ignore browser preference . ",
    "url": "/children/Jenkins/grandchildren/JenkinsInstallOnUbuntu.html",
    "relUrl": "/children/Jenkins/grandchildren/JenkinsInstallOnUbuntu.html"
  },"52": {
    "doc": "Jenkins Installation",
    "title": "Jenkins Installation",
    "content": " ",
    "url": "/children/Jenkins/JenkinsInstallation.html",
    "relUrl": "/children/Jenkins/JenkinsInstallation.html"
  },"53": {
    "doc": "Jenkins Jobs",
    "title": "Jenkins jobs",
    "content": " ",
    "url": "/children/Jenkins/JenkinsJobs.html#jenkins-jobs",
    "relUrl": "/children/Jenkins/JenkinsJobs.html#jenkins-jobs"
  },"54": {
    "doc": "Jenkins Jobs",
    "title": "Jenkins Jobs",
    "content": " ",
    "url": "/children/Jenkins/JenkinsJobs.html",
    "relUrl": "/children/Jenkins/JenkinsJobs.html"
  },"55": {
    "doc": "Manage Jenkins",
    "title": "Manage Jenkins",
    "content": "Configure System . # of excutors: 4 Usage: только .net Jenkins URL: Поставить 8081 Usage Statistics: Отключить Save . Configure Global Security . Authorization: Logged-in users can do anything . | Allow anonymous read access | . Установка обновления . cd /usr/share/jenkins Скачать в эту папку sudo mv jenkins.war jenkins_новая_директория ll sudo service jenkins restart . ",
    "url": "/children/Jenkins/grandchildren/ManageJenkins.html",
    "relUrl": "/children/Jenkins/grandchildren/ManageJenkins.html"
  },"56": {
    "doc": "Manage Plugins",
    "title": "Manage Plugins",
    "content": "Установка плагинов . http://45.89.52.66:8081/pluginManager/ http://45.89.52.66:8081/pluginManager/available/ При установка плагина желательно поставить галку . | Restart Jenkins when installation После установки плагина желательно делать sudo service jenkins restart | . ",
    "url": "/children/Jenkins/grandchildren/ManagePlugins.html",
    "relUrl": "/children/Jenkins/grandchildren/ManagePlugins.html"
  },"57": {
    "doc": "Merge",
    "title": "Merge",
    "content": "Fast-Forward . git merge fix Если ветка fix выше чем ветка ‘master’, на которой стоит HEAD - подвинет master вместе с HEAD на коммит fix. fix не удаляется. Дальше можно переместить HEAD на fix через git checkout fix . cat .git/ORIG_HEAD покажет id предыдущего положения HEAD git branch -f master ORIG_HEAD вернуть master где она была . Истинный мердж . Когда один бранчхед не входит в ветку другого. HEAD стоит на master, мердж с feature. git status должен быть пустой. git diff --name-only master feature покажет какие файлы различаются. git merge-base master feature покажет на каком коммите была развилка. git merge feature анализирует изменение в каждом файле. Пробует auto-merge . CONFLICT . Если мердж прервался cat .git/MERGE_HEAD покажет id коммита, с которым мы мерджились, но возник конфликт. git show e2e4:index.html git show master:index.html git show feature:index.html покажут версии файлов в разных бранчхедах. 7.1-7.2 . git checkout --ours git checkout --theirs git checkout --merge git merge --abort git checkout --conflict=diff3 --merge index.html git merge --continue . ",
    "url": "/children/Git/3.%20Git%20Merge/Merge.html",
    "relUrl": "/children/Git/3.%20Git%20Merge/Merge.html"
  },"58": {
    "doc": "Putty",
    "title": "Putty",
    "content": "Для того чтобы не рвалось соединения в Connection поставить Seconds between keepalives 30 . ",
    "url": "/children/Ubuntu/Putty.html",
    "relUrl": "/children/Ubuntu/Putty.html"
  },"59": {
    "doc": "Repository Create",
    "title": "Git Init",
    "content": "git init Создать репозиторий . ",
    "url": "/children/Git/5.%20Git%20Repository/Repository%20Create.html#git-init",
    "relUrl": "/children/Git/5.%20Git%20Repository/Repository%20Create.html#git-init"
  },"60": {
    "doc": "Repository Create",
    "title": "Repository Create",
    "content": " ",
    "url": "/children/Git/5.%20Git%20Repository/Repository%20Create.html",
    "relUrl": "/children/Git/5.%20Git%20Repository/Repository%20Create.html"
  },"61": {
    "doc": "UFW",
    "title": "UFW",
    "content": "https://askubuntu.com/questions/541675/ufw-is-blocking-all-even-when-i-set-rules-to-allow sudo ufw status посмотреть правила UFW sudo ufw status verbose . sudo iptables -L -v -n Посмотреть iptables . ufw reset никогда не нажимать . ufw enable вкл ufw disable вкл . Базовая настройка UFW . Проверить чтобы стояло IPV6=yes . sudo nano /etc/default/ufw . Запретить все входящие, разрешить все исходящие . sudo ufw default deny incoming . sudo ufw default allow outgoing . Разрешить входящие ssh . sudo ufw allow ssh . sudo ufw allow 500,4500/udp . sudo ufw allow 7777 . sudo ufw allow 8080 . sudo ufw allow 8081 . Включить . sudo ufw enable . Дальше . Если надо удалить правило: . sudo ufw status numbered . sudo ufw delete 2 . IKEV2 Восстановление . ip route show default . sudo ufw allow 500,4500/udp . sudo nano /etc/ufw/before.rules . Добавить перед *filter (интерфейс ens3) . *nat -A POSTROUTING -s 10.10.10.0/24 -o ens3 -m policy --pol ipsec --dir out -j ACCEPT -A POSTROUTING -s 10.10.10.0/24 -o ens3 -j MASQUERADE COMMIT *mangle -A FORWARD --match policy --pol ipsec --dir in -s 10.10.10.0/24 -o ens3 -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360 COMMIT . Добавить после #End required lines . -A ufw-before-forward --match policy --pol ipsec --dir in --proto esp -s 10.10.10.0/24 -j ACCEPT -A ufw-before-forward --match policy --pol ipsec --dir out --proto esp -d 10.10.10.0/24 -j ACCEPT . Дальше . sudo nano /etc/ufw/sysctl.conf . В конец файла . net/ipv4/ip_forward=1 net/ipv4/conf/all/accept_redirects=0 net/ipv4/conf/all/send_redirects=0 net/ipv4/ip_no_pmtu_disc=1 . ",
    "url": "/children/Ubuntu/UFW.html",
    "relUrl": "/children/Ubuntu/UFW.html"
  },"62": {
    "doc": "UFW",
    "title": "Проверка iptables",
    "content": "iptables -L -v -n . Поставить IPV6=NO а потом вернуть . sudo nano /etc/default/ufw . Удалить все правила UFW из iptables . for i in `iptables -L INPUT --line-numbers |grep '[0-9].*ufw' | cut -f 1 -d ' ' | sort -r `; do iptables -D INPUT $i ; done for i in `iptables -L FORWARD --line-numbers |grep '[0-9].*ufw' | cut -f 1 -d ' ' | sort -r `; do iptables -D FORWARD $i ; done for i in `iptables -L OUTPUT --line-numbers |grep '[0-9].*ufw' | cut -f 1 -d ' ' | sort -r `; do iptables -D OUTPUT $i ; done for i in `iptables -L | grep 'Chain .*ufw' | cut -d ' ' -f 2`; do iptables -X $i ; done . Грохнуть iptables . iptables -F . ",
    "url": "/children/Ubuntu/UFW.html#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-iptables",
    "relUrl": "/children/Ubuntu/UFW.html#проверка-iptables"
  },"63": {
    "doc": "Working Tree Update",
    "title": "Git Checkout -- &lt;pathspec&gt;",
    "content": "Используется для отката отдельных файлов до коммита. Всё, что после -- воспринимается как путь. git checkout e2e4 -- &lt;pathspec&gt; Откатывает состояние в WT файла до состояния в коммите e2e4, и сразу добавляет новое состояние файла в индекс. git reset -- &lt;pathspec&gt; Сбрасывает состояние файла в индексе до состояние в HEAD. ",
    "url": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#git-checkout----pathspec",
    "relUrl": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#git-checkout----pathspec"
  },"64": {
    "doc": "Working Tree Update",
    "title": "Откат всей WT через Git Checkout &lt;branch&gt;. Перемещает HEAD",
    "content": "git checkout -f Отменить все изменения WT, отменить весь текущий коммит. untracked не трогает. git checkout -f HEAD То же самое. git checkout master Обновить WT до состояние ласт-коммита master. Поставить HEAD на master. git checkout --force master Игнорировать изменения в текущей WT, обновить WT до состояния ласт-коммита master. Поставить HEAD на master. ",
    "url": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#%D0%BE%D1%82%D0%BA%D0%B0%D1%82-%D0%B2%D1%81%D0%B5%D0%B9-wt-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-git-checkout-branch-%D0%BF%D0%B5%D1%80%D0%B5%D0%BC%D0%B5%D1%89%D0%B0%D0%B5%D1%82-head",
    "relUrl": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#откат-всей-wt-через-git-checkout-branch-перемещает-head"
  },"65": {
    "doc": "Working Tree Update",
    "title": "Откат отдельных файлов до состояния коммита через Git Checkout",
    "content": "git checkout 54a4 -- index.html Откатить index.html до 54a4 + Добавить новую версию в индекс. То же что git checkout 54a4 index.html git reset -- index.html Отмена индексирования index.html, будет возвращен в состояние HEAD. git checkout @ index.html Откатить index.html до состояния коммита, на котором HEAD. git checkout @ -- index.html то же самое git checkout @~~~~ – Program.cs //Откатить Program.cs на 4 коммита назад git checkout @~4 git checkout - Переключиться на предыдующую ветку . ",
    "url": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#%D0%BE%D1%82%D0%BA%D0%B0%D1%82-%D0%BE%D1%82%D0%B4%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D1%85-%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2-%D0%B4%D0%BE-%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D1%8F-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%B0-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-git-checkout",
    "relUrl": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#откат-отдельных-файлов-до-состояния-коммита-через-git-checkout"
  },"66": {
    "doc": "Working Tree Update",
    "title": "Git Rm",
    "content": "Удаляет файлы и папки в текущем коммите [и рабочей директории] git rm -r src Удалить и из рабочей директории из текущего коммита папку со всеми вложениями То же что rm -r src + git add src git rm -r --cached index.md Удалить src только из индекса, без рабочей директории git rm -f index.md Удалить файл. Игнорировать предупреждение, что он modified. ",
    "url": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#git-rm",
    "relUrl": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#git-rm"
  },"67": {
    "doc": "Working Tree Update",
    "title": "Git Mv",
    "content": "Переименовать файл и в рабочей директории и в индексе текущего коммита git mv index.html index.md Переименовать index.html в index.md . ",
    "url": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#git-mv",
    "relUrl": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#git-mv"
  },"68": {
    "doc": "Working Tree Update",
    "title": "Git Stash",
    "content": "git stash Сохраняет состояние WT. Использовать перед например git checkout. git stash pop Восстанавливает WT из стэша. ",
    "url": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#git-stash",
    "relUrl": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#git-stash"
  },"69": {
    "doc": "Working Tree Update",
    "title": "Git Clean",
    "content": "Удаляет untracked git clean -d git clean -x git clean -f git clean -dxf . ",
    "url": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#git-clean",
    "relUrl": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html#git-clean"
  },"70": {
    "doc": "Working Tree Update",
    "title": "Working Tree Update",
    "content": " ",
    "url": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html",
    "relUrl": "/children/Git/1.%20Git%20Working%20Tree/Working%20Tree%20Update.html"
  },"71": {
    "doc": "Amichai",
    "title": "Создать проекты, добавить пакеты",
    "content": ". | Blank Solution . | Создать проекты . | src/ | src/Web (Empty .Net) | src/Presentation (Class Library) | src/Infrastructure (Class Library) | src/Application (Class Library) | src/Domain (Class Library) | requests (Shared Project) | docs (Shared Project) | . | Удалить везде Class1.cs . | Добавить везде референсы | . | Web | Presentation | Infrastructure | Application | . | Presentation | Web | Application | Domain | . | Infrastructure | Infrastructure |   |   | . | Application | Application |   |   | . ",
    "url": "/children/dotnet/amichai/amichai.html#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D1%82%D1%8C-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B-%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BF%D0%B0%D0%BA%D0%B5%D1%82%D1%8B",
    "relUrl": "/children/dotnet/amichai/amichai.html#создать-проекты-добавить-пакеты"
  },"72": {
    "doc": "Amichai",
    "title": "Добавить файлы",
    "content": ". | Web - Contracts - v1 - Authentication - Requests - RegisterRequest.cs - LoginRequest.cs - Responses - SuccessResponse.cs - FailedResponse.cs - Posts - Requests - CreatePostRequest.cs - UpdatePostRequest.cs - Responses - PostResponse.cs - ApiRoutes.cs - Options - ApiSwaggerOptions.cs - DependencyInjection.cs | Presentation - Controllers - v1 - AuthenticationController.cs - PostsController.cs - TagsController.cs - ErrorController.cs | Infrastructure - Authentication - JwtSettings.cs - JwtTokenGenerator.cs - Persistence - UserRepository.cs - Services - DateTimeProvider.cs - DependencyInjection.cs | Application - Authentication - Commands - Register - RegisterCommand.cs - RegisterCommandHandler.cs - Common - AuthenticationResult.cs - Queries - Login - LoginQuery.cs - LoginQueryHandler.cs - Common - Interfaces - Authentication - IJwtTokenGenerator.cs - Services - IDateTimeProvider.cs - Persistence - IUserRepository.cs - DependencyInjection.cs | Domain - Entities - User.cs | . ",
    "url": "/children/dotnet/amichai/amichai.html#%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D1%84%D0%B0%D0%B9%D0%BB%D1%8B",
    "relUrl": "/children/dotnet/amichai/amichai.html#добавить-файлы"
  },"73": {
    "doc": "Amichai",
    "title": "Добавить пакеты",
    "content": "| Presentation | Infrastructure | Application |———–|—————-|————-| System.Configuration.ConfigurationManager | Microsoft.Extensions.Configuration | Microsoft.Extensions.DependencyInjection |Swashbuckle.AspNetCore | Microsoft.Extensions.Options.ConfigurationExtension |MediatR| Microsoft.AspNetCore.Identity.EntityFrameworkCore | Microsoft.EntityFrameworkCore.SqlServer | MediatR.Extensions.Microsoft.DependencyInjection | - | Microsoft.EntityFrameworkCore.Tools | - | - | Microsoft.AspNetCore.Identity.EntityFrameworkCore | - | - | System.IdentityModel.Tokens.Jwt | - | . ",
    "url": "/children/dotnet/amichai/amichai.html#%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BF%D0%B0%D0%BA%D0%B5%D1%82%D1%8B",
    "relUrl": "/children/dotnet/amichai/amichai.html#добавить-пакеты"
  },"74": {
    "doc": "Amichai",
    "title": "Код",
    "content": "Dependency Injection . Web/DependencyInjection.cs . public static IServiceCollection AddPresentation(this IServiceCollection services) { services.AddIdentity&lt;IdentityUser, IdentityRole&gt;(options =&gt; { options.Password.RequireDigit = false; options.Password.RequireNonAlphanumeric = false; options.Password.RequireUppercase = false; options.Password.RequiredLength = 6; }) .AddRoles&lt;IdentityRole&gt;() .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;(); services.AddSwaggerGen(x =&gt; { x.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo {Title=\"My Api\", Version=\"v1\" }); }); return services; } . Infrastructure/DependencyInjection.cs ``` csharp public static IServiceCollection AddInfrastructure(this IServiceCollection services, ConfigurationManager config) { return services; } ``` Application/DependencyInjection.cs ```csharp public static IServiceCollection AddApplication(this IServiceCollection services) { services.AddMediatR(typeof(DependencyInjection).Assembly); return services; } ``` Web/Program.cs ```csharp var builder = WebApplication.CreateBuilder(args); { builder.Services.AddApplication(); builder.Services.AddInfrastructure(builder.Configuration); builder.Services.AddPresentation(); builder.Services.AddControllers(); } var app = builder.Build(); { app.UseHttpsRedirection(); Assembly presentationAssembly = typeof(Presentation.AssemblyReference).Assembly; app.MapControllers().AddApplicationPart(presentationAssembly); app.Run(); } ``` DateTime Provider . Application . Common/Services/IDateTimeProvider.cs ```csharp public interface IDateTimeProvider { DateTime UtcNow { get; } } ``` Infrastructure . Services/DateTimeProvider.cs ```csharp public class DateTimeProvider : IDateTimeProvider { public DateTime UtcNow =&gt; DateTime.UtcNow; } ``` DependencyInjection.cs Добавить ```csharp services.AddSingleton&lt;IDateTimeProvider, DateTimeProvider&gt;(); ``` DbContext &amp; Unit of Work . Web . appsettings.json ```json \"ConnectionStrings\": { \"DefaultConnection\": \"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=Portfolio2022;Integrated Security=True; Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False\" } ``` Infrastructure . Persistence/ApplicationDbContext.cs ```csharp public class ApplicationDbContext : IdentityDbContext { public ApplicationDbContext(DbContextOptions options) : base(options) { } public DbSet Users { get; set; } public DbSet Posts { get; set; } } ``` &lt;/details&gt; Persistence/UnitOfWork.cs ```csharp public sealed class UnitOfWork : IUnitOfWork { private readonly ApplicationDbContext _ctx; public UnitOfWork(ApplicationDbContext ctx) { _ctx = ctx; } public Task SaveChangesAsync(CancellationToken cancellationToken = default) { return _ctx.SaveChangesAsync(cancellationToken); } } ``` DependencyInjection.cs ```csharp public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration configuration) { services.AddDbContext(options =&gt; options.UseSqlServer(configuration[\"DefaultConnection\"])); } ``` &lt;/details&gt; **Application** Persistence/IUnitOfWork.cs ```csharp ``` ### Identity **Web** Program.cs ```csharp var builder = WebApplication.CreateBuilder(args); { builder.Services.AddIdentity&lt;IdentityUser, IdentityRole&gt;(options =&gt; { options.Password.RequireDigit = false; options.Password.RequireNonAlphanumeric = false; options.Password.RequireUppercase = false; options.Password.RequiredLength = 6; }) .AddRoles() .AddEntityFrameworkStores(); } var app = builder.Build(); { { IServiceScope scope = app.Services.CreateScope(); ApplicationDbContext ctx = scope.ServiceProvider.GetRequiredService(); UserManager userManager = scope.ServiceProvider.GetRequiredService&lt;UserManager&gt;(); RoleManager roleManager = scope.ServiceProvider.GetRequiredService&lt;RoleManager&gt;(); ctx.Database.EnsureCreated(); IdentityRole adminRole = new IdentityRole(\"Admin\"); if (!ctx.Roles.Any()) { roleManager.CreateAsync(adminRole).GetAwaiter().GetResult(); } if (!ctx.Users.Any(u =&gt; u.UserName == \"admin\")) { IdentityUser adminUser = new IdentityUser { UserName = \"admin\", Email = \"admin@example.com\" }; userManager.CreateAsync(adminUser, \"P@ssword123!\").GetAwaiter().GetResult(); userManager.AddToRoleAsync(adminUser, adminRole.Name).GetAwaiter().GetResult(); } } } ``` &lt;/details&gt; ### User Repository **Domain** Aggregates/User.cs ```csharp public class User { public Guid Id { get; set; } = Guid.NewGuid(); public string FirstName { get; set; } = null!; public string LastName { get; set; } = null!; public string Email { get; set; } = null!; public string Password { get; set; } = null!; } ``` **Application** Persistence/IUserRepository.cs ```csharp public interface IUserRepository { User? GetUserByEmail(string email); void Add(User user); } ``` **Infrastructure** Persistence/UserRepository.cs ```csharp public class UserRepository : IUserRepository { private static readonly List _users = new(); public User? GetUserByEmail(string email) { return _users.SingleOrDefault(u =&gt; u.Email == email); } public void Add(User user) { _users.Add(user); } } ``` &lt;/details&gt; DependencyInjection.cs ```csharp public static class DependencyInjection { public static IServiceCollection AddInfrastructure(this IServiceCollection services) { services.AddScoped&lt;IUserRepository, UserRepository&gt;(); return services; } } ``` ### Post Repository **Domain** Entities/Post.cs ```csharp public class Post : Entity { public DateTime CreationDate { get; set; } public string Author { get; set; } public string Title { get; set; } public string Content { get; set; } public DateTime? DisplayUntil { get; set; } public string UserId { get; set; } public virtual ICollection Tags { get; set; } } ``` &lt;/details&gt; Entities/Tag.cs ```csharp public class Tag : Entity { public string Text { get; set; } public int? PostId { get; set; } [ForeignKey(nameof(PostId))] public Post Post { get; set; } } ``` &lt;/details&gt; Entities/IPostService.cs ```csharp public interface IPostService : ITweetbookAppService&lt;Post,int&gt; { Task&lt;IEnumerable&gt; GetTagsByPostAsync(int postId); Task CreatePostTagAsync(Tag tag); } ``` &lt;/details&gt; Entities/PostService.cs ```csharp public class PostService : TweetbookAppService, IPostService { //private readonly IHttpContextAccessor _httpContextAccessor; //public PostService(DataContext dataContext, IHttpContextAccessor httpContextAccessor) : base(dataContext) //{ // _httpContextAccessor = httpContextAccessor; //} public PostService(DataContext dataContext) : base(dataContext) {} public override async Task UpdateAsync(Post item) { CheckInstanceAvailability(); var itemToUpdate = await GetByIdAsync(item.Id); if (itemToUpdate == null) return await Task.FromResult(false); //The infrastructure evaluates for us via PostOwnershipValidationFilter where applied //But what if the developer forgets to decorate the endpoint with the attribute aforementioned? //In this case, uncomment the line below or adopt a better coding strategy* //if (!CurrentUserIsOwner(itemToUpdate.UserId)) // return await Task.FromResult(false); //*throw new SecurityException(\"Access denied to the request resource or operation\") //DataContext.Set().Update(item); //See next line below //https://stackoverflow.com/questions/7106211/entity-framework-why-explicitly-set-entity-state-to-modified item.UserId = itemToUpdate.UserId; DataContext.Entry(itemToUpdate).CurrentValues.SetValues(item); var updated = await DataContext.SaveChangesAsync() &gt; 0; return await Task.FromResult(updated); } public override async Task RemoveAsync(int id) { CheckInstanceAvailability(); var itemToRemove = await GetByIdAsync(id); if (itemToRemove != null) { //The infrastructure evaluates for us via PostOwnershipValidationFilter where applied //But what if the developer forgets to decorate the endpoint with the attribute aforementioned? //In this case, uncomment the line below or adopt a better coding strategy* //if (!CurrentUserIsOwner(itemToRemove.UserId)) // return await Task.FromResult(false); //*throw new SecurityException(\"Access denied to the request resource or operation\") DataContext.Entry(itemToRemove).State = EntityState.Deleted; await DataContext.SaveChangesAsync(); } return await Task.FromResult(true); } public async Task&lt;IEnumerable&gt; GetTagsByPostAsync(int postId) { //TODO: Implement get tags by post id method CheckInstanceAvailability(); return await Task.FromResult(Enumerable.Empty()); } public async Task CreatePostTagAsync(Tag tag) { CheckInstanceAvailability(); var relatedPost = await GetByIdAsync(tag.PostId.Value); if (relatedPost != null) { await DataContext.Tags.AddAsync(tag); var created = await DataContext.SaveChangesAsync() &gt; 0; return await Task.FromResult(created ? tag : null); } return await Task.FromResult((Tag)null); } //The infrastructure evaluates for us via PostOwnershipValidationFilter where applied //private bool CurrentUserIsOwner(string postUserId) =&gt; string.Equals(_httpContextAccessor.HttpContext.GetCurrentUserId(), postUserId, StringComparison.Ordinal); } ``` &lt;/details&gt; Entities/IAppService.cs ```csharp public interface ITweetbookAppService&lt;T, TKey&gt; where T : class { Task GetByIdAsync(TKey id); Task&lt;IEnumerable&gt; GetAllAsync(); Task CreateAsync(T item); Task UpdateAsync(T item); Task RemoveAsync(TKey id); } ``` &lt;/details&gt; Entities/AppService.cs ```csharp public abstract class TweetbookAppService : ITweetbookAppService&lt;T, int&gt; where T : Entity { protected DataContext DataContext { get; private set; } public TweetbookAppService(DataContext dataContext) { DataContext = dataContext; } public async virtual Task&lt;IEnumerable&gt; GetAllAsync() { CheckInstanceAvailability(); return await Task.FromResult(DataContext.Set().ToImmutableList()); } public async virtual Task GetByIdAsync(int id) { CheckInstanceAvailability(); return await DataContext.Set().FirstOrDefaultAsync(it =&gt; it.Id == id); } public async virtual Task CreateAsync(T item) { CheckInstanceAvailability(); await DataContext.Set().AddAsync(item); var created = await DataContext.SaveChangesAsync() &gt; 0; return await Task.FromResult(created); } public async virtual Task RemoveAsync(int id) { CheckInstanceAvailability(); var itemToRemove = await GetByIdAsync(id); if (itemToRemove != null) { DataContext.Entry(itemToRemove).State = EntityState.Deleted; await DataContext.SaveChangesAsync(); } return await Task.FromResult(true); } public async virtual Task UpdateAsync(T item) { CheckInstanceAvailability(); //DataContext.Set().Update(item); var itemToUpdate = await DataContext.Set().SingleOrDefaultAsync(it =&gt; it.Id == item.Id); if (itemToUpdate == null) return await Task.FromResult(false); //https://stackoverflow.com/questions/7106211/entity-framework-why-explicitly-set-entity-state-to-modified DataContext.Entry(itemToUpdate).CurrentValues.SetValues(item); var updated = await DataContext.SaveChangesAsync() &gt; 0; return await Task.FromResult(updated); } #region IDisposable Support private bool disposedValue = false; // To detect redundant calls protected virtual void Dispose(bool disposing) { if (!disposedValue) { if (disposing) { if (DataContext != null) DataContext.Dispose(); } // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below. // TODO: set large fields to null. disposedValue = true; } } ~TweetbookAppService() { Dispose(false); } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } #endregion protected void CheckInstanceAvailability() { if (disposedValue) throw new ObjectDisposedException(\"This service instance was disposed and is no longer available!\"); } } ``` &lt;/details&gt; ### Authentication **Web** Contracts/v1/Authentication/Requests/RegisterRequest.cs ```csharp public record RegisterRequest( string FirstName, string LastName, string Email, string Password); ``` Contracts/v1/Authentication/Requests/LoginRequest.cs ```csharp public record LoginRequest( string Email, string Password); ``` Contracts/v1/Authentication/Responses/SuccessResponse.cs ```csharp public record SuccessResponse( Guid Id, string FirstName, string LastName, string Email, string Token); ``` Contracts/v1/Authentication/Responses/FailedResponse.cs ```csharp public class FailedResponse { } ``` **Application** Authentication/Common/AuthenticationResult.cs ```csharp public record AuthenticationResult( User User, string Token); ``` Authentication/Commands/Register/RegisterCommand.cs ```csharp public record RegisterCommand( string FirstName, string LastName, string Email, string Password) : IRequest; ``` &lt;/details&gt; Authentication/Commands/Register/RegisterCommandHandler.cs ```csharp public class RegisterCommandHandler : IRequestHandler&lt;RegisterCommand, AuthenticationResult&gt; { private readonly IJwtTokenGenerator _jwttokengenerator; private readonly IUserRepository _userRepository; public RegisterCommandHandler(IJwtTokenGenerator jwtTokenGenerator, IUserRepository userRepository) { _jwttokengenerator = jwtTokenGenerator; _userRepository = userRepository; } public async Task Handle(RegisterCommand command, CancellationToken cancellationToken) { if (_userRepository.GetUserByEmail(command.Email) is not null) { throw new Exception(\"User with given email already exists\"); } var user = new User { FirstName = command.FirstName, LastName = command.LastName, Email = command.Email, Password = command.Password }; _userRepository.Add(user); Guid userId = Guid.NewGuid(); var token = _jwttokengenerator.GenerateToken(user); return new AuthenticationResult( user, token); } } ``` &lt;/details&gt; Authentication/Queries/Login/LoginQuery.cs ```csharp public record LoginQuery(string Email, string Password) : IRequest; ``` &lt;/details&gt; Authentication/Queries/Login/LoginQueryHandler.cs ```csharp public class LoginQueryHandler : IRequestHandler&lt;LoginQuery, AuthenticationResult&gt; { private readonly IJwtTokenGenerator _jwttokengenerator; private readonly IUserRepository _userRepository; public LoginQueryHandler(IJwtTokenGenerator jwtTokenGenerator, IUserRepository userRepository) { _jwttokengenerator = jwtTokenGenerator; _userRepository = userRepository; } public async Task Handle(LoginQuery query, CancellationToken cancellationToken) { if (_userRepository.GetUserByEmail(query.Email) is not User user) { throw new Exception(\"User with given email does not exist\"); } if (user.Password != query.Password) { throw new Exception(\"Invalid password\"); } var token = _jwttokengenerator.GenerateToken(user); return new AuthenticationResult( user, token); } } ``` &lt;/details&gt; **Presentation** Controllers/v1/AuthenticationController.cs ```csharp [ApiController] [Route(\"auth\")] public class AuthenticationController : ControllerBase { private readonly ISender _mediator; public AuthenticationController( IMediator mediator) { _mediator = mediator; } [HttpPost(\"register\")] public async Task Register(RegisterRequest request) { var command = new RegisterCommand(request.FirstName, request.LastName, request.Email, request.Password); var authResult = await _mediator.Send(command); var authResponse = new SuccessResponse( authResult.User.Id, authResult.User.FirstName, authResult.User.LastName, authResult.User.Email, authResult.Token); return Ok(request); } [HttpPost(\"login\")] public async Task Login(LoginRequest request) { var query = new LoginQuery(request.Email, request.Password); var authResult = await _mediator.Send(query); var authResponse = new SuccessResponse( authResult.User.Id, authResult.User.FirstName, authResult.User.LastName, authResult.User.Email, authResult.Token); return Ok(request); } } ``` &lt;/details&gt; ### Swagger **Web** appsettings.Development ```json \"ApiSwaggerOptions\": { \"JsonRoute\": \"swagger/{documentName}/swagger.json\", \"Description\": \"Our API\", \"UIEndpoint\": \"v1/swagger.json\" } ``` Options/ApiSwaggerOptions.cs ```csharp public record ApiSwaggerOptions( string JsonRoute = null!, string UiEndpoint = null!, string Description = null!); ``` DependencyInjection.cs ```csharp services.AddSwaggerGen(x =&gt; { x.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo { Title = \"Api\", Version = \"v1\" }); }); ``` Program.cs Добавить ```csharp var swaggerOptions = new ApiSwaggerOptions(); builder.Configuration.GetSection(nameof(ApiSwaggerOptions)) .Bind(swaggerOptions); app.UseSwagger(option =&gt; { option.RouteTemplate = swaggerOptions.JsonRoute; }); app.UseSwaggerUI(option =&gt; { option.SwaggerEndpoint(swaggerOptions.UiEndpoint, swaggerOptions.Description); }); ``` ### JWT ## Тесты - Создать проекты - tests/ - tests/**Architecture.Tests** ## Другое - В корне создать dockerfile ```dockerfile FROM httpd:alpine COPY ./html/ /usr/local/apache2/htdocs/ ``` - Докер bash-команды `docker images` `docker build -t hello-docker:1.0.0 .` - http-запросы VS Code **requests**/Authentication/Register.http ```http @host=https://localhost:7056 POST /auth/register Content-type: application/json { \"firstName\": \"Anton\", \"lastName\": \"K\", \"email\": \"ak@example.com\", \"password\": \"P@ssword123!\" } ``` **requests**/Authentication/Login.http ```http @host=https://localhost:7056 POST /auth/login Content-type: application/json { \"email\": \"ak@example.com\", \"password\": \"P@ssword123!\" } ``` - Установка сервисов ASP.NET через Assembly IInstaller.cs ```csharp public interface IInstaller { void InstallServices(IServiceCollection services, IConfiguration configuration); } ``` InstallerExtensions.cs ```csharp public static class InstallerExtensions { //Вызвать в services Program.cs public static void InstallServicesInAssembly(this IServiceCollection services, IConfiguration configuration) { var installers = typeof(Program).Assembly.ExportedTypes.Where(x =&gt; typeof(IInstaller).IsAssignableFrom(x) &amp;&amp; !x.IsInterface &amp;&amp; !x.IsAbstract) //Найти все классы реализующие IInstaller, которые не интерфейсы и не абстрактные .Select(Activator.CreateInstance) //Создать экземпляр каждого .Cast() //Привести к типу IInstaller .ToList(); //Сделать List installers.ForEach(installer =&gt; installer.InstallServices(services, configuration)); } } ``` &lt;/details&gt; ",
    "url": "/children/dotnet/amichai/amichai.html#%D0%BA%D0%BE%D0%B4",
    "relUrl": "/children/dotnet/amichai/amichai.html#код"
  },"75": {
    "doc": "Amichai",
    "title": "Amichai",
    "content": " ",
    "url": "/children/dotnet/amichai/amichai.html",
    "relUrl": "/children/dotnet/amichai/amichai.html"
  },"76": {
    "doc": "Interview questions",
    "title": "Interview questions",
    "content": " ",
    "url": "/children/dotnet/interview/interview.html",
    "relUrl": "/children/dotnet/interview/interview.html"
  },"77": {
    "doc": "ASP.NET Razor Views Project",
    "title": "Developer Command Prompt for VS 2022",
    "content": "VsDevCmd.bat dotnet --help Все команды CLI dotnet dotnet run Запуск проекта . ",
    "url": "/children/dotnet/razorviews/razorviews.html#developer-command-prompt-for-vs-2022",
    "relUrl": "/children/dotnet/razorviews/razorviews.html#developer-command-prompt-for-vs-2022"
  },"78": {
    "doc": "ASP.NET Razor Views Project",
    "title": "ASP.NET Razor Views Project",
    "content": " ",
    "url": "/children/dotnet/razorviews/razorviews.html",
    "relUrl": "/children/dotnet/razorviews/razorviews.html"
  },"79": {
    "doc": "Richter",
    "title": "Добавить в PATH:",
    "content": "csc.exe: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 (Из этой директории компилятор достает MSCorLib.dll) ildasm, gacutil: C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools . ",
    "url": "/children/dotnet/richter/richter.html#%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%B2-path",
    "relUrl": "/children/dotnet/richter/richter.html#добавить-в-path"
  },"80": {
    "doc": "Richter",
    "title": "Скомпилировать один Program.cs в .exe",
    "content": "(Building Types into a Module) . csc.exe Program.cs (Выполнить в папке, где есть Program.cs) Нужно использовать в файле using System; вместо использования на компиляции /r:MSCorLib.dll /out:Program.exe /t:exe задавать вручную не нужно, это значения по умолчанию или задать параметры явно: csc.exe /out:Program.exe /t:exe /r:MSCorLib.dll Program.cs . ",
    "url": "/children/dotnet/richter/richter.html#%D1%81%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D0%BE%D0%B4%D0%B8%D0%BD-programcs-%D0%B2-exe",
    "relUrl": "/children/dotnet/richter/richter.html#скомпилировать-один-programcs-в-exe"
  },"81": {
    "doc": "Richter",
    "title": "Ildasm",
    "content": "ILDasm Program.exe в папке с Program.exe Ctrl+M посмотреть метадату View/Statistics посмотреть статистику . Что такое CLR-assembly: To summarize, an assembly is a unit of reuse, versioning, and security. It allows you to partition your types and resources into separate files so that you, and consumers of your assembly, get to determine which files to package together and deploy. After the CLR loads the file containing the manifest, it can determine which of the assembly’s other files contain the types and resources the application is referencing. Anyone consuming the assembly is required to know only the name of the file containing the manifest; the file partitioning is then abstracted away from the consumer and can change in the future without breaking the application’s behavior. If you have multiple types that can share a single version number and security settings, it is recommended that you place all of the types in a single file rather than spread the types out over separate files, let alone separate assemblies. The reason is performance. Loading a file/assembly takes the CLR and Windows time to find the assembly, load it, and initialize it. The fewer files/assemblies loaded the better, because loading fewer assemblies helps reduce working set and also reduces fragmentation of a process’s address space. Finally, NGen.exe can perform better optimizations when processing larger files. ",
    "url": "/children/dotnet/richter/richter.html#ildasm",
    "relUrl": "/children/dotnet/richter/richter.html#ildasm"
  },"82": {
    "doc": "Richter",
    "title": "Скомпилировать один Program.cs в .dll",
    "content": "В папке с FUT.cs и RUT.cs csc /out:MultiFileLibrary.dll /t:library /addmodule:RUT.netmodule FUT.cs . ",
    "url": "/children/dotnet/richter/richter.html#%D1%81%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D0%BE%D0%B4%D0%B8%D0%BD-programcs-%D0%B2-dll",
    "relUrl": "/children/dotnet/richter/richter.html#скомпилировать-один-programcs-в-dll"
  },"83": {
    "doc": "Richter",
    "title": "Strongly named &amp; weakly named assemblies",
    "content": " ",
    "url": "/children/dotnet/richter/richter.html#strongly-named--weakly-named-assemblies",
    "relUrl": "/children/dotnet/richter/richter.html#strongly-named--weakly-named-assemblies"
  },"84": {
    "doc": "Richter",
    "title": "Public Assembly Key",
    "content": " ",
    "url": "/children/dotnet/richter/richter.html#public-assembly-key",
    "relUrl": "/children/dotnet/richter/richter.html#public-assembly-key"
  },"85": {
    "doc": "Richter",
    "title": "GAC",
    "content": "Обычно находится в %SystemRoot%\\Microsoft.NET\\Assembly GACUtil.exe для того чтобы добавлять в GAC сборки. Руками не добавлять! В GAC устанавливаются только strongly named сборки . ",
    "url": "/children/dotnet/richter/richter.html#gac",
    "relUrl": "/children/dotnet/richter/richter.html#gac"
  },"86": {
    "doc": "Richter",
    "title": "Delay signing",
    "content": " ",
    "url": "/children/dotnet/richter/richter.html#delay-signing",
    "relUrl": "/children/dotnet/richter/richter.html#delay-signing"
  },"87": {
    "doc": "Richter",
    "title": "Types",
    "content": "class Employee {...} идентично class Employee : System.Object {...} Все типы наследуют от System.Object, поэтому у все есть методы: Public: Equals, GetHashCode, ToString, GetType Protected: MemberwiseClone, Finalize . ",
    "url": "/children/dotnet/richter/richter.html#types",
    "relUrl": "/children/dotnet/richter/richter.html#types"
  },"88": {
    "doc": "Richter",
    "title": "Оператор new",
    "content": ". | Вычисляет количество байт для всех филдов, которые будут в экземпляре | Аллоцирует память, присваивает нули | Инициализирует type object pointer объекта и sync block index members | Вызывает конструктора | . ",
    "url": "/children/dotnet/richter/richter.html#%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80-new",
    "relUrl": "/children/dotnet/richter/richter.html#оператор-new"
  },"89": {
    "doc": "Richter",
    "title": "Casting через cast expression ака скобки",
    "content": ". | Object o = new Employee(); Ок | Employee e = (Employee) o; Ок | internal class Employee internal class Manager : Employee ... Object o = new DateTime(); Empoyee e = (Employee) o; . Не Ок . | . ",
    "url": "/children/dotnet/richter/richter.html#casting-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-cast-expression-%D0%B0%D0%BA%D0%B0-%D1%81%D0%BA%D0%BE%D0%B1%D0%BA%D0%B8",
    "relUrl": "/children/dotnet/richter/richter.html#casting-через-cast-expression-ака-скобки"
  },"90": {
    "doc": "Richter",
    "title": "Операторы через is и as",
    "content": "is возвращает true если типы совместимы Всегда null для false . as присваивает ссылку на объект или null если типы несовместимы . Employee e = o as Employee; if (e != null) { // Use e within the 'if' statement. } . Разница с кастом скобками в том, что при as тип проверяется один раз. ",
    "url": "/children/dotnet/richter/richter.html#%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D1%8B-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-is-%D0%B8-as",
    "relUrl": "/children/dotnet/richter/richter.html#операторы-через-is-и-as"
  },"91": {
    "doc": "Richter",
    "title": "Compile time error (CTE) vs Run Time Error (RTE)",
    "content": "Страница 123 . ",
    "url": "/children/dotnet/richter/richter.html#compile-time-error-cte-vs-run-time-error-rte",
    "relUrl": "/children/dotnet/richter/richter.html#compile-time-error-cte-vs-run-time-error-rte"
  },"92": {
    "doc": "Richter",
    "title": "Run time 127",
    "content": ". | В процессе много? тредов. | Метод ?= тред | Стек идет от high memory address к low memory address | У всех кроме самых простых методов есть prologue code и epilogue code. Стр. 103 . | Создается один процесс. В него загружается CLR. | Для каждого треда аллоцируется 1-MB стек (thread stack). | Этот стек и будет использоваться для передачи аргументов к методу и для хранения локальных переменных | Когда метод начинает выполняться, пролог-код метода аллоцирует память для для локальных переменных метода | . ",
    "url": "/children/dotnet/richter/richter.html#run-time-127",
    "relUrl": "/children/dotnet/richter/richter.html#run-time-127"
  },"93": {
    "doc": "Richter",
    "title": "Richter",
    "content": " ",
    "url": "/children/dotnet/richter/richter.html",
    "relUrl": "/children/dotnet/richter/richter.html"
  }
}
